generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
}

model Student {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String       @unique
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String       @db.ObjectId
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     String       @db.ObjectId
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     String       @db.ObjectId
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  Fee         Fee[]
}

model Teacher {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String           @unique
  username    String           @unique
  name        String
  surname     String
  email       String?          @unique
  phone       String?          @unique
  address     String
  img         String?
  description String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime         @default(now())
  subjects    TeacherSubject[]
  lessons     Lesson[]
  classes     TeacherClass[]
  birthday    DateTime
  Class       Class[]
}

model Parent {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String    @unique
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  level       Int       @unique
  description String?
  students    Student[]
  classes     Class[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Class {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  capacity      Int
  description   String? // ✅ optional field
  supervisorId  String?        @db.ObjectId
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       String         @db.ObjectId
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  TeacherClass  TeacherClass[]
  Fee           Fee[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subject {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  description String?
  teachers    TeacherSubject[]
  lessons     Lesson[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// Explicit many-to-many for Teacher-Subject
model TeacherSubject {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String  @db.ObjectId
  subjectId String  @db.ObjectId
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, subjectId])
}

// Explicit many-to-many for Teacher-Class
model TeacherClass {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String  @db.ObjectId
  classId   String  @db.ObjectId
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])

  @@unique([teacherId, classId])
}

model Lesson {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  description String?
  subjectId   String       @db.ObjectId
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String       @db.ObjectId
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String       @db.ObjectId
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId  String   @db.ObjectId
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime?
  dueDate   DateTime?

  lessonId  String   @db.ObjectId
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  score        Int
  feedback     String
  examId       String?     @db.ObjectId
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId String?     @db.ObjectId
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String      @db.ObjectId
  student      Student     @relation(fields: [studentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Attendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  present   Boolean
  studentId String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  String   @db.ObjectId
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  startTime   DateTime?
  endTime     DateTime?

  classId   String?  @db.ObjectId
  class     Class?   @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  date        DateTime
  classId     String?  @db.ObjectId
  class       Class?   @relation(fields: [classId], references: [id])
  priority    String   @default("normal") // ✅ add this line
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  senderId     String
  senderType   SenderType
  receiverId   String
  receiverType ReceiverType
  content      String
  read         Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Fees management
model Fee {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  amount        Int
  dueDate       DateTime
  paid          Boolean?
  description   String?
  paymentMethod String?
  status        FeeStatus @default(PENDING)
  classId       String?   @db.ObjectId
  class         Class?    @relation(fields: [classId], references: [id])
  studentId     String?   @db.ObjectId
  student       Student?  @relation(fields: [studentId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum FeeStatus {
  PENDING
  PAID
  PARTIAL
}

enum SenderType {
  TEACHER
  STUDENT
  PARENT
  ADMIN
}

enum ReceiverType {
  TEACHER
  STUDENT
  PARENT
  ADMIN
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
